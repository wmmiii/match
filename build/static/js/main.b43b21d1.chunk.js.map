{"version":3,"sources":["base/pieces.tsx","engine/state.ts","Piece.tsx","base/pieceTypes.ts","Board.tsx","engine/index.ts","base/generator.ts","base/moves.ts","base/matches.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["style","display","pieces","width","height","fill","xmlns","id","cx","cy","r","stroke","strokeWidth","d","strokeLinecap","strokeLinejoin","getCell","grid","x","y","column","setCell","object","forEachCell","action","parseInt","Piece","props","state","visible","window","setTimeout","setState","scale","this","color","left","top","icon","className","push","join","onMouseDown","actionDown","onMouseUp","actionUp","onTouchStart","onTouchEnd","viewBox","xlinkHref","React","Component","pieceTypes","type","baseColor","Board","onStart","onEnd","maxX","Infinity","minX","maxY","minY","cells","board","key","Math","max","min","piece","Engine","initialState","generator","allowedMoves","matchRules","currentState","sort","a","b","priority","console","time","settled","tick","score","timeEnd","start","end","some","f","x1","y1","x2","y2","temp","swap","previousState","before","JSON","stringify","falling","forEach","rule","apply","Object","assign","parse","basePieces","keys","index","floor","random","length","uuidv4","moves","abs","clearGroup","group","first","nth","undefined","App","engine","0","1","2","3","4","initialize","gameState","bind","s","e","move","forceUpdate","interval","setInterval","clearInterval","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b43b21d1.chunk.js","sourcesContent":["import React from 'react';\n\nconst style = {\n  display: 'none'\n};\n\nconst pieces = () =>\n<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={style}>\n  <defs>\n    <g id=\"alpha\" fill=\"none\">\n      <circle cx=\"32\" cy=\"32\" r=\"24\" stroke=\"currentColor\" strokeWidth=\"4\"/>\n      <circle cx=\"32\" cy=\"32\" r=\"16\" stroke=\"currentColor\" strokeWidth=\"4\"/>\n    </g>\n    <path id=\"beta\" d=\"M48 12L16 52h32L16 12h32z\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"4\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n    <path id=\"gamma\" d=\"M34 16a2 2 0 10-4 0h4zM8 38a2 2 0 100 4v-4zm48 4a2 2 0 100-4v4zm-5.59-17.59a2 2 0 10-2.82-2.82l2.82 2.82zm-34-2.82a2 2 0 10-2.82 2.82l2.82-2.82zM8 42h24v-4H8v4zm24 0h24v-4H32v4zm0-16c3.87 0 7.36 1.56 9.9 4.1l2.83-2.83A17.95 17.95 0 0032 22v4zm9.9 4.1A13.95 13.95 0 0146 40h4c0-4.97-2.02-9.47-5.27-12.73L41.9 30.1zm2.83 0l5.68-5.69-2.82-2.82-5.69 5.68 2.83 2.83zM18 40c0-3.87 1.56-7.36 4.1-9.9l-2.83-2.83A17.95 17.95 0 0014 40h4zm4.1-9.9A13.95 13.95 0 0132 26v-4c-4.97 0-9.47 2.02-12.73 5.27l2.83 2.83zm0-2.83l-5.69-5.68-2.82 2.82 5.68 5.69 2.83-2.83zM34 24v-8h-4v8h4z\" fill=\"currentColor\"/>\n    <path id=\"delta\" d=\"M32 12l1.41-1.41a2 2 0 00-2.82 0L32 12zM12 32l-1.41-1.41a2 2 0 000 2.82L12 32zm20 20l-1.41 1.41a2 2 0 002.82 0L32 52zm20-20l1.41 1.41a2 2 0 000-2.82L52 32zM30.59 10.59l-20 20 2.82 2.82 20-20-2.82-2.82zm-20 22.82l20 20 2.82-2.82-20-20-2.82 2.82zm22.82 20l20-20-2.82-2.82-20 20 2.82 2.82zm20-22.82l-20-20-2.82 2.82 20 20 2.82-2.82zM30 12v40h4V12h-4z\" fill=\"currentColor\"/>\n  </defs>\n</svg>;\n\nexport default pieces;","export interface State {\n  readonly board: Grid<true>;\n  score: number;\n  pieces: Grid<Piece>;\n  settled: boolean;\n}\n\ntype PieceType = string;\n\nexport interface Piece {\n  readonly id: string;\n  readonly type: PieceType;\n}\n\nexport function getCell<T>(grid: Grid<T>, x: number, y: number): T | undefined {\n  const column = grid[x];\n  if (column != null) {\n    return column[y];\n  } else {\n    return undefined;\n  }\n}\n\nexport function setCell<T>(grid: Grid<T>, x: number, y: number, object: T): void {\n  let column = grid[x];\n  if (column == null) {\n    grid[x] = {};\n    column = grid[x];\n  }\n\n  column[y] = object;\n}\n\nexport function forEachCell<T>(grid: Grid<T>, action: (x: number, y: number, object: T) => void) {\n  for (let x in grid) {\n    const column = grid[x];\n    for (let y in column) {\n      const object = column[y];\n      if (object != null) {\n        action(parseInt(x), parseInt(y), object);\n      }\n    }\n  }\n}\n\nexport function swap<T>(grid: Grid<T>, x1: number, y1: number, x2: number, y2: number): void {\n  const temp = getCell(grid, x1, y1);\n  setCell(grid, x1, y1, getCell(grid, x2, y2));\n  setCell(grid, x2, y2, temp);\n}\n\nexport type Grid<T> = {[x: number]: {[y: number]: T}};","import React from 'react';\nimport './Piece.css';\n\ninterface PieceProps {\n  color: string,\n  icon: string,\n  id: string,\n  scale: number,\n  x: number,\n  y: number,\n\n  actionDown: () => void;\n  actionUp: () => void;\n};\n\ninterface PieceState {\n  visible: boolean;\n}\n\nexport default class Piece extends React.Component<PieceProps, PieceState> {\n\n  constructor(props: PieceProps) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n  }\n\n  componentDidMount() {\n    window.setTimeout(() => {\n      this.setState({ visible: true });\n    }, 100);\n  }\n\n  render() {\n    const scale = this.props.scale\n    const style = {\n      color: this.props.color,\n      height: scale,\n      left: this.props.x * scale + 'px',\n      top: this.props.y * scale + 'px',\n      width: scale,\n    };\n    const icon = '#' + this.props.icon;\n    const className = ['Piece'];\n    if (!this.state.visible) {\n      className.push('hidden');\n    }\n\n    return <div\n        className={className.join(' ')}\n        style={style}\n        onMouseDown={this.props.actionDown}\n        onMouseUp={this.props.actionUp}\n        onTouchStart={this.props.actionDown}\n        onTouchEnd={this.props.actionUp}>\n      <svg width=\"64\" height=\"64\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\">\n        <use xlinkHref={icon} />\n      </svg>\n    </div>;\n  }\n}\n","import PieceType from \"../engine/pieceType\";\n\nconst pieceTypes: {[key: string]: PieceType} = {\n  'alpha': {\n    type: 'alpha',\n    icon: 'alpha',\n    baseColor: '#0066FF',\n  },\n  'beta': {\n    type: 'beta',\n    icon: 'beta',\n    baseColor: '#FFB800',\n  },\n  'gamma': {\n    type: 'gamma',\n    icon: 'gamma',\n    baseColor: '#EB00FF',\n  },\n  'delta': {\n    type: 'delta',\n    icon: 'delta',\n    baseColor: '#00FFC2',\n  },\n};\n\nexport default pieceTypes;","import React from 'react';\nimport { forEachCell, State } from './engine/state';\nimport Piece from './Piece';\nimport pieceTypes from './base/pieceTypes';\nimport './Board.css';\nimport { Coordinate } from './engine/util';\n\ninterface BoardProps {\n  state: State;\n  onStart: (s: Coordinate) => void;\n  onEnd: (e: Coordinate) => void;\n};\n\nconst scale = 64;\n\nconst Board = ({state, onStart, onEnd}: BoardProps) => {\n  let maxX = -Infinity;\n  let minX = Infinity;\n  let maxY = -Infinity;\n  let minY = Infinity;\n\n  const cells: JSX.Element[] = [];\n  forEachCell(state.board, (x, y) => {\n    const style = {\n      left: x * scale + 'px',\n      top: y * scale + 'px',\n    };\n    const key = `${x},${y}`\n    cells.push(<div className=\"Board-cell\" style={style} key={key}></div>);\n\n    maxX = Math.max(x, maxX);\n    maxY = Math.max(y, maxY);\n    minX = Math.min(x, minX);\n    minY = Math.min(y, minY);\n  });\n\n  const pieces: JSX.Element[] = [];\n  forEachCell(state.pieces, (x, y, piece) => {\n    const type = pieceTypes[piece.type];\n    pieces.push(<Piece\n      key={piece.id}\n      color={type.baseColor}\n      icon={type.icon}\n      id={piece.id}\n      scale={scale}\n      actionDown={() => onStart({x, y})}\n      actionUp={() => onEnd({x, y})}\n      x={x}\n      y={y} />);\n  });\n\n  const style = {\n    width: (maxX - minX + 1) * scale + 'px',\n    height: (maxY - minY + 1) * scale + 'px',\n  };\n\n  return <div className=\"Board\" style={style}>\n    <div className=\"Board-grid\">{cells}</div>\n    <div className=\"Board-pieces\">{pieces}</div>\n  </div>\n}\n\nexport default Board;\n","import { forEachCell, getCell, Piece, setCell, State, Grid, swap } from \"./state\"\nimport { Coordinate } from \"./util\";\n\nexport default class Engine {\n  private currentState: State;\n  private generator: Generator;\n\n  private allowedMoves: Move[];\n  private matchRules: MatchRule[];\n\n  constructor(initialState: State,\n      generator: Generator,\n      allowedMoves: Move[],\n      matchRules: MatchRule[]) {\n    this.currentState = initialState;\n    this.generator = generator;\n    this.allowedMoves = allowedMoves;\n    this.matchRules = matchRules.sort((a, b) => b.priority - a.priority);\n  }\n\n  get state(): State {\n    // Never return the actual state, return a copy.\n    return JSON.parse(JSON.stringify(this.currentState));\n  }\n\n  initialize(): void {\n    console.time();\n    while (!this.currentState.settled) {\n      this.tick();\n    }\n    this.currentState.score = 0;\n    console.timeEnd();\n  }\n\n  /**\n   * Performs a move and sets the board into a new state does not perform\n   * scoring yet. Returns a boolean indicating if the rule is legal.\n   */\n  move(start: Coordinate, end: Coordinate): boolean {\n    if (this.currentState.settled === true\n        && this.allowedMoves.some((f) => f(start, end, this.currentState))) {\n      // If the move is legal swap the pieces.\n      swap(this.currentState.pieces, start.x, start.y, end.x, end.y);\n      this.currentState.settled = false;\n      return true;\n    } else {\n      return false;\n    }\n  }\n  \n  /**\n   * If the current state is not yet settled then tick will result in a new\n   * state.\n   */\n  tick(): State {\n    const previousState = this.state;\n    const before = JSON.stringify(previousState);\n    let state = this.state;\n    let settled = true;\n\n    // Make list of falling cells.\n    const falling: Grid<true> = {};\n    forEachCell(state.board, (x, y) => {\n      if (getCell(state.pieces, x, y) == null) {\n        while (getCell(state.board, x, y) != null) {\n          setCell(falling, x, y, true);\n          y -= 1;\n        }\n      }\n    });\n\n    // Move falling cells down.\n    forEachCell(falling, (x, y) => {\n      if (getCell(state.board, x, y - 1) != null) { // There is a cell above\n        setCell(state.pieces, x, y, getCell(previousState.pieces, x, y - 1));\n      } else {\n        setCell(state.pieces, x, y, this.generator({x, y}));\n      }\n      settled = false;\n    });\n\n    // Apply match rules.\n    if (settled) {\n      this.matchRules.forEach((rule) => {\n        const before = JSON.stringify(state);\n        state = rule.apply(state);\n        if (before !== JSON.stringify(state)) {\n        }\n      });\n    }\n\n    state.settled = JSON.stringify(state) === before;\n    this.currentState = state;\n    return Object.assign({}, this.currentState);\n  }\n}\n\nexport type Move = (start: Coordinate, end: Coordinate, state: State) => boolean;\n\nexport interface MatchRule {\n  priority: number,\n  apply: (start: State) => State,\n};\n\nexport type Generator = (coord: Coordinate) => Piece;\n","import {v4 as uuidv4 } from 'uuid';\n\nimport { Generator } from '../engine';\nimport pieceTypes from './pieceTypes';\n\nconst basePieces = Object.keys(pieceTypes);\n\nconst generator: Generator = () => {\n  const index = Math.floor(Math.random() * basePieces.length);\n  return {\n    id: uuidv4(),\n    type: basePieces[index],\n  };\n};\n\nexport default generator;","import { Move } from \"../engine\";\nimport { getCell } from \"../engine/state\";\n\nconst moves: Move[] = [\n  (start, end, state) => {\n    // Must be adjacent.\n    if (Math.abs(start.x - end.x) + Math.abs(start.y - end.y) !== 1) {\n      return false;\n    }\n    // Both cells must be filled\n    return getCell(state.pieces, start.x, start.y) != null\n        && getCell(state.pieces, end.x, end.y) != null;\n  }\n]\n\nexport default moves;","import { MatchRule } from '../engine';\nimport { forEachCell, getCell, setCell, State } from '../engine/state';\nimport { Coordinate } from '../engine/util';\n\nfunction clearGroup(state: State, score: number, ...group: Coordinate[]) {\n  const pieces = state.pieces;\n  forEachCell(state.board, (x, y) => {\n    const first = getCell(pieces, x, y);\n    if (first == null) {\n      return;\n    }\n    const type = first.type;\n    for (let piece of group) {\n      const nth = getCell(pieces, x + piece.x, y + piece.y);\n      if (nth == null || nth.type !== type) {\n        return;\n      }\n    }\n\n    for (let piece of group) {\n      setCell(state.pieces, x + piece.x, y + piece.y, undefined);\n    }\n    state.score += score;\n  });\n\n  return state;\n}\n\nconst matchRules: MatchRule[] = [\n  { // Match 3 horizontally\n    priority: 0.1,\n    apply: (state) => {\n      clearGroup(state,\n        300,\n        { x: -3, y: 0 },\n        { x: -2, y: 0 },\n        { x: -1, y: 0 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n  { // Match 3 Vertically\n    priority: 0.1,\n    apply: (state) => {\n      clearGroup(state,\n        300,\n        { x: 0, y: -3 },\n        { x: 0, y: -2 },\n        { x: 0, y: -1 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n  { // Match 3 horizontally\n    priority: 0,\n    apply: (state) => {\n      clearGroup(state,\n        100,\n        { x: -2, y: 0 },\n        { x: -1, y: 0 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n  { // Match 3 Vertically\n    priority: 0,\n    apply: (state) => {\n      clearGroup(state,\n        100,\n        { x: 0, y: -2 },\n        { x: 0, y: -1 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n];\n\nexport default matchRules;","import React from 'react';\nimport BasePieces from './base/pieces';\nimport './App.css';\nimport Board from './Board';\nimport { State } from './engine/state';\nimport Engine from './engine';\nimport generator from './base/generator';\nimport moves from './base/moves';\nimport matchRules from './base/matches';\nimport { Coordinate } from './engine/util';\n\ninterface AppState  {\n  engine: Engine;\n  gameState: State;\n  start: Coordinate | undefined;\n}\n\nexport default class App extends React.Component<any, AppState> {\n\n  constructor(props: any) {\n    super(props);\n\n    const gameState: State = {\n      board: {\n        0: {\n          1: true,\n          2: true,\n          3: true,\n        },\n        1: {\n          0: true,\n          1: true,\n          2: true,\n          3: true,\n          4: true,\n        },\n        2: {\n          0: true,\n          1: true,\n          2: true,\n          3: true,\n          4: true,\n        },\n        3: {\n          0: true,\n          1: true,\n          2: true,\n          3: true,\n          4: true,\n        },\n        4: {\n          1: true,\n          2: true,\n          3: true,\n        },\n      },\n      score: 0,\n      pieces: [],\n      settled: false,\n    };\n\n    const engine = new Engine(gameState, generator, moves, matchRules);\n    engine.initialize();\n\n    this.state = {\n      engine: engine,\n      gameState: engine.state,\n      start: undefined,\n    };\n    this.onStart = this.onStart.bind(this);\n    this.onEnd = this.onEnd.bind(this);\n  }\n\n  onStart(s: Coordinate): void {\n    this.setState({ start: s });\n  };\n\n  onEnd(e: Coordinate | undefined): void {\n    const engine = this.state.engine;\n    if (e != null && this.state.start != null && engine.state.settled) {\n      if (engine.move(this.state.start, e)) {\n        this.setState({ gameState: engine.state });\n        this.forceUpdate();\n        let interval = window.setInterval(() => {;\n          this.setState({ gameState: engine.tick() });\n          this.forceUpdate();\n          if (this.state.gameState.settled) {\n            window.clearInterval(interval);\n          }\n        }, 200);\n      }\n    }\n    this.setState({ start: undefined });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <BasePieces />\n        <div className=\"score\">\n          {this.state.gameState.score}\n        </div>\n        <Board state={this.state.gameState}\n            onStart={this.onStart}\n            onEnd={this.onEnd}></Board>\n      </div>\n      );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}