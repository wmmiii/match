{"version":3,"sources":["base/pieces.tsx","engine/state.ts","Piece.tsx","base/pieceTypes.ts","Board.tsx","engine/index.ts","base/generator.ts","base/moves.ts","base/rules.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["style","display","pieces","width","height","fill","xmlns","id","cx","cy","r","stroke","strokeWidth","d","strokeLinecap","strokeLinejoin","getCell","grid","x","y","column","setCell","object","forEachCell","action","parseInt","Piece","color","icon","scale","left","top","className","key","viewBox","xlinkHref","pieceTypes","type","baseColor","Board","state","maxX","Infinity","minX","maxY","minY","cells","board","push","Math","max","min","piece","Engine","initialState","generator","allowedMoves","rules","currentState","this","sort","a","b","priority","console","time","settled","tick","score","timeEnd","start","end","some","f","temp","previousState","before","JSON","stringify","falling","forEach","rule","apply","Object","assign","parse","basePieces","keys","index","floor","random","length","uuidv4","moves","abs","first","middle","last","undefined","App","engine","0","1","2","3","4","initialize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46a7a403.chunk.js","sourcesContent":["import React from 'react';\n\nconst style = {\n  display: 'none'\n};\n\nconst pieces = () =>\n<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={style}>\n  <defs>\n    <g id=\"alpha\" fill=\"none\">\n      <circle cx=\"32\" cy=\"32\" r=\"24\" stroke=\"currentColor\" strokeWidth=\"4\"/>\n      <circle cx=\"32\" cy=\"32\" r=\"16\" stroke=\"currentColor\" strokeWidth=\"4\"/>\n    </g>\n    <path id=\"beta\" d=\"M48 12L16 52h32L16 12h32z\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"4\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n    <path id=\"gamma\" d=\"M34 16a2 2 0 10-4 0h4zM8 38a2 2 0 100 4v-4zm48 4a2 2 0 100-4v4zm-5.59-17.59a2 2 0 10-2.82-2.82l2.82 2.82zm-34-2.82a2 2 0 10-2.82 2.82l2.82-2.82zM8 42h24v-4H8v4zm24 0h24v-4H32v4zm0-16c3.87 0 7.36 1.56 9.9 4.1l2.83-2.83A17.95 17.95 0 0032 22v4zm9.9 4.1A13.95 13.95 0 0146 40h4c0-4.97-2.02-9.47-5.27-12.73L41.9 30.1zm2.83 0l5.68-5.69-2.82-2.82-5.69 5.68 2.83 2.83zM18 40c0-3.87 1.56-7.36 4.1-9.9l-2.83-2.83A17.95 17.95 0 0014 40h4zm4.1-9.9A13.95 13.95 0 0132 26v-4c-4.97 0-9.47 2.02-12.73 5.27l2.83 2.83zm0-2.83l-5.69-5.68-2.82 2.82 5.68 5.69 2.83-2.83zM34 24v-8h-4v8h4z\" fill=\"currentColor\"/>\n    <path id=\"delta\" d=\"M32 12l1.41-1.41a2 2 0 00-2.82 0L32 12zM12 32l-1.41-1.41a2 2 0 000 2.82L12 32zm20 20l-1.41 1.41a2 2 0 002.82 0L32 52zm20-20l1.41 1.41a2 2 0 000-2.82L52 32zM30.59 10.59l-20 20 2.82 2.82 20-20-2.82-2.82zm-20 22.82l20 20 2.82-2.82-20-20-2.82 2.82zm22.82 20l20-20-2.82-2.82-20 20 2.82 2.82zm20-22.82l-20-20-2.82 2.82 20 20 2.82-2.82zM30 12v40h4V12h-4z\" fill=\"currentColor\"/>\n  </defs>\n</svg>;\n\nexport default pieces;","export interface State {\n  readonly board: Grid<true>;\n  score: number;\n  pieces: Grid<Piece>;\n  settled: boolean;\n}\n\ntype PieceType = string;\n\nexport interface Piece {\n  readonly id: string;\n  readonly type: PieceType;\n}\n\nexport function getCell<T>(grid: Grid<T>, x: number, y: number): T | undefined {\n  const column = grid[x];\n  if (column != null) {\n    return column[y];\n  } else {\n    return undefined;\n  }\n}\n\nexport function setCell<T>(grid: Grid<T>, x: number, y: number, object: T): void {\n  let column = grid[x];\n  if (column == null) {\n    grid[x] = {};\n    column = grid[x];\n  }\n\n  column[y] = object;\n}\n\nexport function forEachCell<T>(grid: Grid<T>, action: (x: number, y: number, object: T) => void) {\n  for (let x in grid) {\n    const column = grid[x];\n    for (let y in column) {\n      const object = column[y];\n      if (object != null) {\n        action(parseInt(x), parseInt(y), object);\n      }\n    }\n  }\n}\n\nexport type Grid<T> = {[x: number]: {[y: number]: T}};","import React from 'react';\nimport './Piece.css';\n\ninterface PieceProps {\n  color: string,\n  icon: string,\n  id: string,\n  scale: number,\n  x: number,\n  y: number,\n};\n\nconst Piece = ({color, icon, id, scale, x, y}: PieceProps) => {\n  const style = {\n    color: color,\n    height: scale,\n    left: x * scale + 'px',\n    top: y * scale + 'px',\n    width: scale,\n  };\n  icon = '#' + icon;\n  return <div className=\"Piece\" style={style} key={id}>\n    <svg width=\"64\" height=\"64\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\">\n      <use xlinkHref={icon} />\n    </svg>\n  </div>;\n}\n\nexport default Piece;\n","import PieceType from \"../engine/pieceType\";\n\nconst pieceTypes: {[key: string]: PieceType} = {\n  'alpha': {\n    type: 'alpha',\n    icon: 'alpha',\n    baseColor: '#0066FF',\n  },\n  'beta': {\n    type: 'beta',\n    icon: 'beta',\n    baseColor: '#FFB800',\n  },\n  'gamma': {\n    type: 'gamma',\n    icon: 'gamma',\n    baseColor: '#EB00FF',\n  },\n  'delta': {\n    type: 'delta',\n    icon: 'delta',\n    baseColor: '#00FFC2',\n  },\n};\n\nexport default pieceTypes;","import React from 'react';\nimport { forEachCell, State } from './engine/state';\nimport Piece from './Piece';\nimport pieceTypes from './base/pieceTypes';\nimport './Board.css';\n\ninterface BoardProps {\n  state: State;\n};\n\nconst scale = 64;\n\nconst Board = ({state}: BoardProps) => {\n  let maxX = -Infinity;\n  let minX = Infinity;\n  let maxY = -Infinity;\n  let minY = Infinity;\n\n  const cells: JSX.Element[] = [];\n  forEachCell(state.board, (x, y) => {\n    const style = {\n      left: x * scale + 'px',\n      top: y * scale + 'px',\n    };\n    const key = `${x},${y}`\n    cells.push(<div className=\"Board-cell\" style={style} key={key}></div>);\n\n    maxX = Math.max(x, maxX);\n    maxY = Math.max(y, maxY);\n    minX = Math.min(x, minX);\n    minY = Math.min(y, minY);\n  });\n\n  const pieces: JSX.Element[] = [];\n  forEachCell(state.pieces, (x, y, piece) => {\n    const type = pieceTypes[piece.type];\n    pieces.push(Piece({\n      color: type.baseColor,\n      icon: type.icon,\n      id: piece.id,\n      scale: scale,\n      x: x,\n      y: y,\n    }));\n  });\n\n  const style = {\n    width: (maxX - minX) * scale + 'px',\n    height: (maxY - minY) * scale + 'px',\n  };\n\n  return <div className=\"Board\" style={style}>\n    <div className=\"Board-grid\">{cells}</div>\n    <div className=\"Board-pieces\">{pieces}</div>\n  </div>\n}\n\nexport default Board;\n","import { forEachCell, getCell, Piece, setCell, State, Grid } from \"./state\"\nimport { Coordinate } from \"./util\";\n\nexport default class Engine {\n  private currentState: State;\n  private generator: Generator;\n\n  private allowedMoves: Move[];\n  private rules: Rule[];\n\n  constructor(initialState: State,\n      generator: Generator,\n      allowedMoves: Move[],\n      rules: Rule[]) {\n    this.currentState = initialState;\n    this.generator = generator;\n    this.allowedMoves = allowedMoves;\n    this.rules = rules.sort((a, b) => a.priority - b.priority);\n  }\n\n  get state(): State {\n    // Never return the actual state, return a copy.\n    return JSON.parse(JSON.stringify(this.currentState));\n  }\n\n  initialize(): void {\n    console.time();\n    while (!this.currentState.settled) {\n      this.tick();\n    }\n    this.currentState.score = 0;\n    console.timeEnd();\n  }\n\n  /**\n   * Performs a move and sets the board into a new state does not perform\n   * scoring yet. Returns a boolean indicating if the rule is legal.\n   */\n  move(start: Coordinate, end: Coordinate): boolean {\n    if (this.currentState.settled === true\n        && this.allowedMoves.some((f) => f(start, end, this.currentState))) {\n      // If the move is legal swap the pieces.\n      const temp = this.currentState.pieces[start.x][start.y];\n      this.currentState.pieces[start.x][start.y] = this.currentState.pieces[end.x][end.y];\n      this.currentState.pieces[start.x][start.y] = temp;\n      this.currentState.settled = false;\n      return true;\n    } else {\n      return false;\n    }\n  }\n  \n  /**\n   * If the current state is not yet settled then tick will result in a new\n   * state.\n   */\n  tick(): State {\n    const previousState = this.state;\n    const before = JSON.stringify(previousState);\n    let state = this.state;\n    let settled = true;\n\n    // Make list of falling cells.\n    const falling: Grid<true> = {};\n    forEachCell(state.board, (x, y) => {\n      if (getCell(state.pieces, x, y) == null) {\n        while (getCell(state.board, x, y) != null) {\n          setCell(falling, x, y, true);\n          y -= 1;\n        }\n      }\n    });\n\n    // Move falling cells down.\n    forEachCell(falling, (x, y) => {\n      if (getCell(state.board, x, y - 1) != null) { // There is a cell above\n        setCell(state.pieces, x, y, getCell(previousState.pieces, x, y - 1));\n      } else {\n        setCell(state.pieces, x, y, this.generator({x, y}));\n      }\n      settled = false;\n    });\n\n    // Apply rules.\n    if (settled) {\n      this.rules.forEach((rule) => {\n        const before = JSON.stringify(state);\n        state = rule.apply(state);\n        if (before !== JSON.stringify(state)) {\n        }\n      });\n    }\n\n    state.settled = JSON.stringify(state) === before;\n    this.currentState = state;\n    return Object.assign({}, this.currentState);\n  }\n}\n\nexport type Move = (start: Coordinate, end: Coordinate, state: State) => boolean;\n\nexport interface Rule {\n  priority: number,\n  apply: (start: State) => State,\n};\n\nexport type Generator = (coord: Coordinate) => Piece;\n","import {v4 as uuidv4 } from 'uuid';\n\nimport { Generator } from '../engine';\nimport pieceTypes from './pieceTypes';\n\nconst basePieces = Object.keys(pieceTypes);\n\nconst generator: Generator = () => {\n  const index = Math.floor(Math.random() * basePieces.length);\n  return {\n    id: uuidv4(),\n    type: basePieces[index],\n  };\n};\n\nexport default generator;","import { Move } from \"../engine\";\nimport { getCell } from \"../engine/state\";\n\nconst moves: Move[] = [\n  (start, end, state) => {\n    // Must be adjacent.\n    if (Math.abs(start.x - end.x) + Math.abs(start.y - end.y) !== 1) {\n      return false;\n    }\n    // Both cells must be filled\n    return getCell(state.pieces, start.x, start.y) != null\n        && getCell(state.pieces, end.x, end.y) != null;\n  }\n]\n\nexport default moves;","import { Rule } from '../engine';\nimport { forEachCell, getCell, setCell } from '../engine/state';\n\nconst rules: Rule[] = [\n  { // Match 3 horizontally\n    priority: 0,\n    apply: (state) => {\n      forEachCell(state.board, (x, y) => {\n        const first = getCell(state.pieces, x, y);\n        if (first == null) {\n          return;\n        }\n        const middle = getCell(state.pieces, x + 1, y);\n        if (middle == null) {\n          return;\n        }\n        const last = getCell(state.pieces, x + 2, y);\n        if (last == null) {\n          return;\n        }\n\n        if (first.type === middle.type && first.type === last.type) {\n          setCell(state.pieces, x, y, undefined);\n          setCell(state.pieces, x + 1, y, undefined);\n          setCell(state.pieces, x + 2, y, undefined);\n          state.score += 100;\n        }\n      });\n      return state;\n    },\n  },\n\n  { // Match 3 vertically\n    priority: 0,\n    apply: (state) => {\n      forEachCell(state.board, (x, y) => {\n        const first = getCell(state.pieces, x, y);\n        if (first == null) {\n          return;\n        }\n        const middle = getCell(state.pieces, x, y + 1);\n        if (middle == null) {\n          return;\n        }\n        const last = getCell(state.pieces, x, y + 2);\n        if (last == null) {\n          return;\n        }\n\n        if (first.type === middle.type && first.type === last.type) {\n          setCell(state.pieces, x, y, undefined);\n          setCell(state.pieces, x, y + 1, undefined);\n          setCell(state.pieces, x, y + 2, undefined);\n          state.score += 100;\n        }\n      });\n      return state;\n    },\n  }\n];\n\nexport default rules;","import React from 'react';\nimport BasePieces from './base/pieces';\nimport './App.css';\nimport Board from './Board';\nimport { State } from './engine/state';\nimport Engine from './engine';\nimport generator from './base/generator';\nimport moves from './base/moves';\nimport rules from './base/rules';\n\nfunction App() {\n  const state: State = {\n    board: {\n      0: {\n        1: true,\n        2: true,\n        3: true,\n      },\n      1: {\n        0: true,\n        1: true,\n        2: true,\n        3: true,\n        4: true,\n      },\n      2: {\n        0: true,\n        1: true,\n        2: true,\n        3: true,\n        4: true,\n      },\n      3: {\n        0: true,\n        1: true,\n        2: true,\n        3: true,\n        4: true,\n      },\n      4: {\n        1: true,\n        2: true,\n        3: true,\n      },\n    },\n    score: 0,\n    pieces: [],\n    settled: false,\n  };\n\n  const engine = new Engine(state, generator, moves, rules);\n  engine.initialize();\n\n  return (\n    <div className=\"App\">\n      <BasePieces />\n      <Board state={engine.state}></Board>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}