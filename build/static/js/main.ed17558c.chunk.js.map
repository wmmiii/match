{"version":3,"sources":["engine/state.ts","base/pieceTypes.ts","Piece.tsx","Board.tsx","engine/index.ts","base/generator.ts","base/moves.ts","base/matchRules.ts","Game.tsx","base/pieces.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCell","grid","x","y","column","setCell","object","old","forEachCell","action","parseInt","pieceTypes","type","icon","baseColor","Piece","props","state","visible","window","setTimeout","setState","scale","this","style","color","height","left","top","width","className","push","selected","destroyed","join","onMouseDown","event","actionDown","nativeEvent","onMouseMove","actionMove","onMouseUp","actionUp","onTouchStart","onTouchMove","onTouchEnd","xmlns","viewBox","xlinkHref","React","Component","Board","boardRef","createRef","lastCoordinates","undefined","onStart","bind","onMove","onEnd","MouseEvent","toGridSpace","clientX","clientY","touch","touches","maxX","Infinity","minX","maxY","minY","cells","gameState","board","key","Math","max","min","pieces","piece","id","destroyedThisTick","destroyedLastTick","ref","rect","current","getBoundingClientRect","Error","floor","Engine","initialState","generator","allowedMoves","matchRules","currentState","sort","a","b","priority","console","time","settled","tick","totalScore","score","multiplier","timeEnd","start","end","some","f","x1","y1","x2","y2","temp","swap","previousState","before","JSON","stringify","falling","forEach","rule","apply","Object","assign","parse","basePieces","keys","index","random","length","uuidv4","moves","abs","clearGroup","group","first","nth","Game","lastNumber","Map","aBlipRef","amBlipRef","emBlipRef","gmBlipRef","engine","0","1","2","3","4","initialize","s","e","move","update","interval","setInterval","clearInterval","blips","audio","count","element","cloneNode","volume","play","targetNumber","set","property","value","speed","get","startTime","Date","getTime","startValue","requestAnimationFrame","onFrame","t","easeOutCirc","src","delta","sqrt","display","fill","cx","cy","r","stroke","strokeWidth","d","strokeLinecap","strokeLinejoin","App","prop","toggleAudio","audioClass","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed17558c.chunk.js","sourcesContent":["export interface State {\n  readonly board: Grid<true>;\n  totalScore: number;\n  multiplier: number;\n  score: number;\n  pieces: Grid<Piece>;\n  destroyedThisTick: Grid<Piece>;\n  destroyedLastTick: Grid<Piece>;\n  settled: boolean;\n}\n\nexport interface ImmutableState extends State {\n  readonly totalScore: number;\n  readonly destroyedLastTick: ImmutableGrid<Piece>;\n  readonly settled: boolean;\n}\n\ntype PieceType = string;\n\nexport interface Piece {\n  readonly id: string;\n  readonly type: PieceType;\n}\n\nexport function getCell<T>(grid: Grid<T>, x: number, y: number): T | undefined {\n  const column = grid[x];\n  if (column != null) {\n    return column[y];\n  } else {\n    return undefined;\n  }\n}\n\nexport function setCell<T>(grid: Grid<T>, x: number, y: number, object: T): T | undefined {\n  let column = grid[x];\n  if (column == null) {\n    grid[x] = {};\n    column = grid[x];\n  }\n\n  const old = column[y];\n  column[y] = object;\n  return old;\n}\n\nexport function forEachCell<T>(grid: Grid<T>, action: (x: number, y: number, object: T) => void) {\n  for (let x in grid) {\n    const column = grid[x];\n    for (let y in column) {\n      const object = column[y];\n      if (object != null) {\n        action(parseInt(x), parseInt(y), object);\n      }\n    }\n  }\n}\n\nexport function swap<T>(grid: Grid<T>, x1: number, y1: number, x2: number, y2: number): void {\n  const temp = getCell(grid, x1, y1);\n  setCell(grid, x1, y1, getCell(grid, x2, y2));\n  setCell(grid, x2, y2, temp);\n}\n\nexport type Grid<T> = {[x: number]: {[y: number]: T}};\nexport type ImmutableGrid<T> = {readonly [x: number]: {readonly [y: number]: T}};","import PieceType from \"../engine/pieceType\";\n\nconst pieceTypes: {[key: string]: PieceType} = {\n  'alpha': {\n    type: 'alpha',\n    icon: 'alpha',\n    baseColor: '#4791ff',\n  },\n  'beta': {\n    type: 'beta',\n    icon: 'beta',\n    baseColor: '#FFB800',\n  },\n  'gamma': {\n    type: 'gamma',\n    icon: 'gamma',\n    baseColor: '#EB00FF',\n  },\n  'delta': {\n    type: 'delta',\n    icon: 'delta',\n    baseColor: '#00FFC2',\n  },\n};\n\nexport default pieceTypes;","import React from 'react';\nimport './Piece.scss';\n\ninterface PieceProps {\n  color: string;\n  icon: string;\n  destroyed: boolean;\n  id: string;\n  scale: number;\n  selected: boolean;\n  x: number;\n  y: number;\n\n  actionDown: (event: MouseEvent | TouchEvent) => void;\n  actionMove: (event: MouseEvent | TouchEvent) => void;\n  actionUp: () => void;\n};\n\ninterface PieceState {\n  visible: boolean;\n}\n\nexport default class Piece extends React.Component<PieceProps, PieceState> {\n\n  constructor(props: PieceProps) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n  }\n\n  componentDidMount() {\n    window.setTimeout(() => {\n      this.setState({ visible: true });\n    }, 100);\n  }\n\n  render() {\n    const scale = this.props.scale\n    const style = {\n      color: this.props.color,\n      height: scale,\n      left: this.props.x * scale + 'px',\n      top: this.props.y * scale + 'px',\n      width: scale,\n    };\n    const icon = '#' + this.props.icon;\n    const className = ['Piece'];\n    if (!this.state.visible) {\n      className.push('hidden');\n    }\n    if (this.props.selected) {\n      className.push('selected');\n    }\n    if (this.props.destroyed) {\n      className.push('destroyed');\n    }\n\n    return <div\n        className={className.join(' ')}\n        style={style}\n        onMouseDown={(event) => this.props.actionDown(event.nativeEvent)}\n        onMouseMove={(event) => this.props.actionMove(event.nativeEvent)}\n        onMouseUp={this.props.actionUp}\n        onTouchStart={(event) => this.props.actionDown(event.nativeEvent)}\n        onTouchMove={(event) => this.props.actionMove(event.nativeEvent)}\n        onTouchEnd={this.props.actionUp}>\n      <svg width=\"64\" height=\"64\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\">\n        <use xlinkHref={icon} />\n      </svg>\n    </div>;\n  }\n}\n","import React from 'react';\nimport { forEachCell, getCell, State, Piece as GamePiece } from './engine/state';\nimport pieceTypes from './base/pieceTypes';\nimport './Board.scss';\nimport { Coordinate } from './engine/util';\nimport Piece from './Piece';\n\ninterface BoardProps {\n  gameState: State;\n  onStart: (s: Coordinate) => false;\n  onEnd: (e: Coordinate) => false;\n};\n\ninterface BoardState {\n  lastCoordinates: Coordinate | undefined;\n}\n\nconst scale = 64;\n\nexport class Board extends React.Component<BoardProps, BoardState> {\n  private boardRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: BoardProps) {\n    super(props);\n\n    this.boardRef = React.createRef();\n\n    this.state = {\n      lastCoordinates: undefined,\n    };\n    this.onStart = this.onStart.bind(this);\n    this.onMove = this.onMove.bind(this);\n    this.onEnd = this.onEnd.bind(this);\n  }\n\n  onStart(event: MouseEvent | TouchEvent) {\n    if (event instanceof MouseEvent) {\n      this.props.onStart(this.toGridSpace(event.clientX, event.clientY));\n    } else {\n      const touch = event.touches[0];\n      this.props.onStart(this.toGridSpace(touch.clientX, touch.clientY));\n    }\n  }\n\n  onMove(event: MouseEvent | TouchEvent) {\n    if (event instanceof MouseEvent) {\n      this.setState({ lastCoordinates: this.toGridSpace(event.clientX, event.clientY) });\n    } else {\n      const touch = event.touches[0];\n      this.setState({ lastCoordinates: this.toGridSpace(touch.clientX, touch.clientY) });\n    }\n  }\n\n  onEnd() {\n    if (this.state.lastCoordinates != null) {\n      this.props.onEnd(this.state.lastCoordinates);\n    }\n    this.setState({ lastCoordinates: undefined });\n  }\n\n  render() {\n    let maxX = -Infinity;\n    let minX = Infinity;\n    let maxY = -Infinity;\n    let minY = Infinity;\n\n    const cells: JSX.Element[] = [];\n    forEachCell(this.props.gameState.board, (x, y) => {\n      const style = {\n        left: x * scale + 'px',\n        top: y * scale + 'px',\n      };\n      const key = `${x},${y}`;\n      const className = ['Board-cell']\n      if (getCell(this.props.gameState.board, x, y - 1) == null) {\n        className.push('Board-entry');\n      }\n      cells.push(<div className={className.join(' ')} style={style} key={key}></div>);\n\n      maxX = Math.max(x, maxX);\n      maxY = Math.max(y, maxY);\n      minX = Math.min(x, minX);\n      minY = Math.min(y, minY);\n    });\n\n    const pieces: JSX.Element[] = [];\n    const destroyed = (x: number, y: number, piece: GamePiece) => {\n      const type = pieceTypes[piece.type];\n      pieces.push(<Piece\n        color={type.baseColor}\n        destroyed={true}\n        icon={type.icon}\n        id={piece.id}\n        key={piece.id}\n        scale={scale}\n        selected={false}\n        x={x}\n        y={y}\n\n        actionDown={() => {}}\n        actionMove={() => {}}\n        actionUp={() => {}} />);\n    };\n    forEachCell(this.props.gameState.destroyedThisTick, destroyed);\n    forEachCell(this.props.gameState.destroyedLastTick, destroyed);\n    forEachCell(this.props.gameState.pieces, (x, y, piece) => {\n      const type = pieceTypes[piece.type];\n      const selected = this.state.lastCoordinates != null\n        && this.state.lastCoordinates.x === x\n        && this.state.lastCoordinates.y === y;\n      pieces.push(<Piece\n        color={type.baseColor}\n        destroyed={false}\n        icon={type.icon}\n        id={piece.id}\n        key={piece.id}\n        scale={scale}\n        selected={selected}\n        x={x}\n        y={y}\n        \n        actionDown={this.onStart}\n        actionMove={this.onMove}\n        actionUp={this.onEnd} />);\n    });\n\n    const style = {\n      width: (maxX - minX + 1) * scale + 'px',\n      height: (maxY - minY + 1) * scale + 'px',\n    };\n\n    return <div className=\"Board\" ref={this.boardRef} style={style}>\n      <div className=\"Board-grid\">{cells}</div>\n      <div className=\"Board-pieces\">{pieces}</div>\n    </div>\n  }\n\n  private toGridSpace(clientX: number, clientY: number): Coordinate {\n    const rect = this.boardRef.current?.getBoundingClientRect();\n    const left = rect?.left;\n    if (left == null) {\n      throw Error('Could not get left of board ref!');\n    }\n    const top = rect?.top;\n    if (top == null) {\n      throw Error('Could not get top of board ref!');\n    }\n    return {\n      x: Math.floor((clientX - left) / scale),\n      y: Math.floor((clientY - top) / scale),\n    };\n  }\n}\n\nexport default Board;\n","import { forEachCell, getCell, Piece, setCell, State, Grid, swap, ImmutableState } from \"./state\"\nimport { Coordinate } from \"./util\";\n\nexport default class Engine {\n  private currentState: State;\n  private generator: Generator;\n\n  private allowedMoves: Move[];\n  private matchRules: MatchRule[];\n\n  constructor(initialState: State,\n      generator: Generator,\n      allowedMoves: Move[],\n      matchRules: MatchRule[]) {\n    this.currentState = initialState;\n    this.generator = generator;\n    this.allowedMoves = allowedMoves;\n    this.matchRules = matchRules.sort((a, b) => b.priority - a.priority);\n  }\n\n  get state(): ImmutableState {\n    // Never return the actual state, return a copy.\n    return JSON.parse(JSON.stringify(this.currentState));\n  }\n\n  initialize(): void {\n    console.time();\n    while (!this.currentState.settled) {\n      this.tick();\n    }\n    this.currentState.totalScore = 0;\n    this.currentState.score = 0;\n    this.currentState.multiplier = 0;\n    this.currentState.destroyedThisTick = [];\n    console.timeEnd();\n  }\n\n  /**\n   * Performs a move and sets the board into a new state does not perform\n   * scoring yet. Returns a boolean indicating if the rule is legal.\n   */\n  move(start: Coordinate, end: Coordinate): boolean {\n    if (this.currentState.settled === true\n        && this.allowedMoves.some((f) => f(start, end, this.currentState))) {\n      // If the move is legal swap the pieces.\n      swap(this.currentState.pieces, start.x, start.y, end.x, end.y);\n      this.currentState.settled = false;\n      return true;\n    } else {\n      return false;\n    }\n  }\n  \n  /**\n   * If the current state is not yet settled then tick will result in a new\n   * state.\n   */\n  tick(): State {\n    const previousState = this.state;\n    const before = JSON.stringify(previousState);\n    let state = this.state;\n    let settled = true;\n    (state as State).destroyedLastTick = state.destroyedThisTick;\n    state.destroyedThisTick = [];\n\n\n    // Make list of falling cells.\n    const falling: Grid<true> = {};\n    forEachCell(state.board, (x, y) => {\n      if (getCell(state.pieces, x, y) == null) {\n        while (getCell(state.board, x, y) != null) {\n          setCell(falling, x, y, true);\n          y -= 1;\n        }\n      }\n    });\n\n    // Move falling cells down.\n    forEachCell(falling, (x, y) => {\n      if (getCell(state.board, x, y - 1) != null) { // There is a cell above\n        setCell(state.pieces, x, y, getCell(previousState.pieces, x, y - 1));\n      } else {\n        setCell(state.pieces, x, y, this.generator({x, y}));\n      }\n      settled = false;\n    });\n\n    // Apply match rules.\n    if (settled) {\n      this.matchRules.forEach((rule) => {\n        const before = JSON.stringify(state);\n        state = rule.apply(state);\n        if (before !== JSON.stringify(state)) {\n        }\n      });\n    }\n\n    (state as State).settled = JSON.stringify(state) === before;\n\n    // If the system is settled cash the points\n    if (state.settled) {\n      (state as State).totalScore += state.score * state.multiplier;\n      state.score = 0;\n      state.multiplier = 0;\n    }\n\n    this.currentState = state;\n    return Object.assign({}, this.currentState);\n  }\n}\n\nexport type Move = (start: Coordinate, end: Coordinate, state: State) => boolean;\n\nexport interface MatchRule {\n  priority: number,\n  apply: (start: State) => State,\n};\n\nexport type Generator = (coord: Coordinate) => Piece;\n","import {v4 as uuidv4 } from 'uuid';\n\nimport { Generator } from '../engine';\nimport pieceTypes from './pieceTypes';\n\nconst basePieces = Object.keys(pieceTypes);\n\nconst generator: Generator = () => {\n  const index = Math.floor(Math.random() * basePieces.length);\n  return {\n    id: uuidv4(),\n    type: basePieces[index],\n  };\n};\n\nexport default generator;","import { Move } from \"../engine\";\nimport { getCell } from \"../engine/state\";\n\nconst moves: Move[] = [\n  (start, end, state) => {\n    // Must be adjacent.\n    if (Math.abs(start.x - end.x) + Math.abs(start.y - end.y) !== 1) {\n      return false;\n    }\n    // Both cells must be filled\n    return getCell(state.pieces, start.x, start.y) != null\n        && getCell(state.pieces, end.x, end.y) != null;\n  }\n]\n\nexport default moves;","import { MatchRule } from '../engine';\nimport { forEachCell, getCell, setCell, State } from '../engine/state';\nimport { Coordinate } from '../engine/util';\n\nfunction clearGroup(state: State, score: number, ...group: Coordinate[]) {\n  const pieces = state.pieces;\n  forEachCell(state.board, (x, y) => {\n    const first = getCell(pieces, x, y);\n    if (first == null) {\n      return;\n    }\n    const type = first.type;\n    for (let piece of group) {\n      const nth = getCell(pieces, x + piece.x, y + piece.y);\n      if (nth == null || nth.type !== type) {\n        return;\n      }\n    }\n\n    for (let piece of group) {\n      const old = setCell(state.pieces, x + piece.x, y + piece.y, undefined);\n      setCell(state.destroyedThisTick, x + piece.x, y + piece.y, old);\n    }\n    state.score += score;\n    state.multiplier += 1;\n  });\n\n  return state;\n}\n\nconst matchRules: MatchRule[] = [\n  { // Match 5 horizontally\n    priority: 0.2,\n    apply: (state) => {\n      clearGroup(state,\n        500,\n        { x: -4, y: 0 },\n        { x: -3, y: 0 },\n        { x: -2, y: 0 },\n        { x: -1, y: 0 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n  { // Match 5 Vertically\n    priority: 0.2,\n    apply: (state) => {\n      clearGroup(state,\n        500,\n        { x: 0, y: -4 },\n        { x: 0, y: -3 },\n        { x: 0, y: -2 },\n        { x: 0, y: -1 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n  { // Match 4 horizontally\n    priority: 0.1,\n    apply: (state) => {\n      clearGroup(state,\n        300,\n        { x: -3, y: 0 },\n        { x: -2, y: 0 },\n        { x: -1, y: 0 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n  { // Match 4 Vertically\n    priority: 0.1,\n    apply: (state) => {\n      clearGroup(state,\n        300,\n        { x: 0, y: -3 },\n        { x: 0, y: -2 },\n        { x: 0, y: -1 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n  { // Match 3 horizontally\n    priority: 0,\n    apply: (state) => {\n      clearGroup(state,\n        100,\n        { x: -2, y: 0 },\n        { x: -1, y: 0 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n  { // Match 3 Vertically\n    priority: 0,\n    apply: (state) => {\n      clearGroup(state,\n        100,\n        { x: 0, y: -2 },\n        { x: 0, y: -1 },\n        { x: 0, y: 0 });\n      return state;\n    },\n  },\n];\n\nexport default matchRules;","import React from 'react';\nimport './Game.scss';\nimport Board from './Board';\nimport { forEachCell, ImmutableState, State } from './engine/state';\nimport Engine from './engine';\nimport generator from './base/generator';\nimport moves from './base/moves';\nimport matchRules from './base/matchRules';\nimport { Coordinate } from './engine/util';\n\ninterface GameState {\n  engine: Engine;\n  gameState: ImmutableState;\n  start: Coordinate | undefined;\n  totalScore: number;\n  score: number;\n  multiplier: number;\n}\n\ninterface GameProps {\n  audio: boolean;\n}\n\nexport default class Game extends React.Component<GameProps, GameState> {\n  private lastNumber: Map<keyof GameState, number> = new Map();\n  private aBlipRef: React.RefObject<HTMLAudioElement>;\n  private amBlipRef: React.RefObject<HTMLAudioElement>;\n  private emBlipRef: React.RefObject<HTMLAudioElement>;\n  private gmBlipRef: React.RefObject<HTMLAudioElement>;\n\n  constructor(props: any) {\n    super(props);\n\n    const gameState: State = {\n      board: {\n        0: {\n          1: true,\n          2: true,\n          3: true,\n        },\n        1: {\n          0: true,\n          1: true,\n          2: true,\n          3: true,\n          4: true,\n        },\n        2: {\n          0: true,\n          1: true,\n          2: true,\n          3: true,\n          4: true,\n        },\n        3: {\n          0: true,\n          1: true,\n          2: true,\n          3: true,\n          4: true,\n        },\n        4: {\n          1: true,\n          2: true,\n          3: true,\n        },\n      },\n      totalScore: 0,\n      score: 0,\n      multiplier: 0,\n      pieces: [],\n      destroyedThisTick: [],\n      destroyedLastTick: [],\n      settled: false,\n    };\n\n    const engine = new Engine(gameState, generator, moves, matchRules);\n    engine.initialize();\n\n    this.aBlipRef = React.createRef();\n    this.amBlipRef = React.createRef();\n    this.emBlipRef = React.createRef();\n    this.gmBlipRef = React.createRef();\n\n    this.state = {\n      engine: engine,\n      gameState: engine.state,\n      start: undefined,\n      totalScore: engine.state.totalScore,\n      score: engine.state.score,\n      multiplier: engine.state.multiplier,\n    };\n    this.onStart = this.onStart.bind(this);\n    this.onEnd = this.onEnd.bind(this);\n  }\n\n  onStart(s: Coordinate): false {\n    this.setState({ start: s });\n    return false;\n  };\n\n  onEnd(e: Coordinate | undefined): false {\n    const engine = this.state.engine;\n    if (e != null && this.state.start != null && engine.state.settled) {\n      if (engine.move(this.state.start, e)) {\n        this.update(engine.tick());\n        let interval = window.setInterval(() => {;\n          this.update(engine.tick());\n          if (this.state.gameState.settled) {\n            window.clearInterval(interval);\n          }\n        }, 150);\n      }\n    }\n    this.setState({ start: undefined });\n    return false;\n  }\n\n  update(state: ImmutableState) {\n    const blips = [\n      this.aBlipRef,\n      this.amBlipRef,\n      this.emBlipRef,\n      this.gmBlipRef,\n    ];\n    if (this.props.audio) {\n      let count = 0;\n      forEachCell(state.destroyedThisTick, () => {\n        count++;\n        window.setTimeout(() => {\n          const index = Math.floor(Math.random() * blips.length);\n          const element = blips[index];\n          if (element != null && element.current != null) {\n            const audio = (element.current.cloneNode(true) as HTMLAudioElement);\n            audio.volume = 1 / count;\n            audio.play();\n          }\n        }, count * 40);\n      });\n    }\n\n    this.setState({\n      gameState: state,\n      multiplier: state.multiplier,\n    });\n    this.targetNumber('totalScore', state.totalScore, 2000);\n    if (state.score !== 0) {\n      this.targetNumber('score', state.score, 200); \n    } else {\n      this.setState({ score: 0 });\n      this.lastNumber.set('score', 0);\n    }\n  }\n\n  targetNumber(property: keyof GameState, value: number, speed: number) {\n    if (this.lastNumber.get(property) === value) {\n      return;\n    }\n\n    const startTime = new Date().getTime();\n    const startValue = this.state[property] as number;\n\n    const onFrame = () => {\n      if (this.lastNumber.get(property) !== value) {\n        return;\n      }\n\n      let t = (new Date().getTime() - startTime) / speed;\n      if (t > 1) {\n        const state: any = {};\n        state[property] = value;\n        this.setState(state);\n        return;\n      }\n      const state: any = {};\n      state[property] = Math.floor(this.easeOutCirc(t, startValue, value - startValue));\n      this.setState(state);\n      window.requestAnimationFrame(onFrame);\n    };\n    window.requestAnimationFrame(onFrame);\n\n    this.lastNumber.set(property, value);\n  }\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div className=\"header\">\n          <div className=\"score\">\n            {this.state.totalScore}\n          </div>\n          <div className=\"space\"></div>\n          <div className=\"score\">\n            {this.state.score}\n          </div>\n          <div className=\"spacer\"></div>\n          <div className=\"score\">\n            x{this.state.multiplier}\n          </div>\n        </div>\n        <Board gameState={this.state.gameState}\n            onStart={this.onStart}\n            onEnd={this.onEnd}></Board>\n        <audio ref={this.aBlipRef} src=\"aBlip.wav\" />\n        <audio ref={this.amBlipRef} src=\"amBlip.wav\" />\n        <audio ref={this.emBlipRef} src=\"emBlip.wav\" />\n        <audio ref={this.gmBlipRef} src=\"gmBlip.wav\" />\n      </div>\n      );\n  }\n\n  private easeOutCirc(t: number, start: number, delta: number) {\n    t--;\n    return delta * Math.sqrt(1 - t*t) + start;\n  };\n}\n","import React from 'react';\n\nconst style = {\n  display: 'none'\n};\n\nconst pieces = () =>\n<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={style}>\n  <defs>\n    <g id=\"alpha\" fill=\"none\">\n      <circle cx=\"32\" cy=\"32\" r=\"24\" stroke=\"currentColor\" strokeWidth=\"4\"/>\n      <circle cx=\"32\" cy=\"32\" r=\"16\" stroke=\"currentColor\" strokeWidth=\"4\"/>\n    </g>\n    <path id=\"beta\" d=\"M48 12L16 52h32L16 12h32z\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"4\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n    <path id=\"gamma\" d=\"M34 16a2 2 0 10-4 0h4zM8 38a2 2 0 100 4v-4zm48 4a2 2 0 100-4v4zm-5.59-17.59a2 2 0 10-2.82-2.82l2.82 2.82zm-34-2.82a2 2 0 10-2.82 2.82l2.82-2.82zM8 42h24v-4H8v4zm24 0h24v-4H32v4zm0-16c3.87 0 7.36 1.56 9.9 4.1l2.83-2.83A17.95 17.95 0 0032 22v4zm9.9 4.1A13.95 13.95 0 0146 40h4c0-4.97-2.02-9.47-5.27-12.73L41.9 30.1zm2.83 0l5.68-5.69-2.82-2.82-5.69 5.68 2.83 2.83zM18 40c0-3.87 1.56-7.36 4.1-9.9l-2.83-2.83A17.95 17.95 0 0014 40h4zm4.1-9.9A13.95 13.95 0 0132 26v-4c-4.97 0-9.47 2.02-12.73 5.27l2.83 2.83zm0-2.83l-5.69-5.68-2.82 2.82 5.68 5.69 2.83-2.83zM34 24v-8h-4v8h4z\" fill=\"currentColor\"/>\n    <path id=\"delta\" d=\"M32 12l1.41-1.41a2 2 0 00-2.82 0L32 12zM12 32l-1.41-1.41a2 2 0 000 2.82L12 32zm20 20l-1.41 1.41a2 2 0 002.82 0L32 52zm20-20l1.41 1.41a2 2 0 000-2.82L52 32zM30.59 10.59l-20 20 2.82 2.82 20-20-2.82-2.82zm-20 22.82l20 20 2.82-2.82-20-20-2.82 2.82zm22.82 20l20-20-2.82-2.82-20 20 2.82 2.82zm20-22.82l-20-20-2.82 2.82 20 20 2.82-2.82zM30 12v40h4V12h-4z\" fill=\"currentColor\"/>\n  </defs>\n</svg>;\n\nexport default pieces;","import React from 'react';\nimport Game from './Game';\nimport './App.scss';\nimport BasePieces from './base/pieces';\n\ninterface AppState  {\n  audio: boolean;\n}\n\nexport default class App extends React.Component<any, AppState> {\n  constructor(prop: any) {\n    super(prop);\n\n    this.state = {\n      audio: true,\n    };\n\n    this.toggleAudio = this.toggleAudio.bind(this);\n  }\n\n  toggleAudio() {\n    this.setState({ audio: !this.state.audio });\n  }\n\n  render() {\n    const audioClass = ['audio'];\n    if (!this.state.audio) {\n      audioClass.push('disabled');\n    }\n\n    return (\n      <div className=\"App\">\n        <button className={audioClass.join(' ')}\n            onClick={this.toggleAudio}>\n          {this.state.audio ? 'Sound On' : 'Sound Off'}\n        </button>\n        <BasePieces />\n        <Game audio={this.state.audio} />\n      </div>\n      );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}